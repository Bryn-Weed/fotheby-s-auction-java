/*
 * carvings.java
 *
 * Generated with Matisse Schema Definition Language 9.1.9
 * Generation date: Sat Apr 21 17:28:07 2018
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

import com.matisse.reflect.*;

/**
 * <code>carvings</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class carvings extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.9
     * Generation Date: Sat Apr 21 17:28:07 2018
     */

    /*
     * Class variables and methods
     */

    /** Class <code>carvings</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("carvings"));

    /**
     * Gets the <code>carvings</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public carvings(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected carvings(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(carvings.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, carvings.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(carvings.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, carvings.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'materialUsed' */

    /** Attribute <code>materialUsed</code> cache ID */
    private static int materialUsedCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("materialUsed",CID));

    /**
     * Gets the <code>materialUsed</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getMaterialUsedAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(materialUsedCID);
    }


    /**
     * Gets the <code>materialUsed</code> attribute value.
     * @return the value
     *
     * @see #setMaterialUsed
     * @see #removeMaterialUsed
     */
    public final String getMaterialUsed() {
        return getString(getMaterialUsedAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>materialUsed</code> attribute value.
     * @param val the new value
     *
     * @see #getMaterialUsed
     * @see #removeMaterialUsed
     */
    public final void setMaterialUsed(String val) {
        setString(getMaterialUsedAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>materialUsed</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getMaterialUsed
     * @see #setMaterialUsed
     */
    public final void removeMaterialUsed() {
        removeValue(getMaterialUsedAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getMaterialUsed
     * @see #setMaterialUsed
     */
    public final boolean isMaterialUsedDefaultValue() {
        return isDefaultValue(getMaterialUsedAttribute(getMtDatabase()));
    }


    /* Attribute 'dimensionHeight' */

    /** Attribute <code>dimensionHeight</code> cache ID */
    private static int dimensionHeightCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("dimensionHeight",CID));

    /**
     * Gets the <code>dimensionHeight</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getDimensionHeightAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(dimensionHeightCID);
    }


    /**
     * Gets the <code>dimensionHeight</code> attribute value.
     * @return the value
     *
     * @see #setDimensionHeight
     * @see #removeDimensionHeight
     */
    public final int getDimensionHeight() {
        return getInteger(getDimensionHeightAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>dimensionHeight</code> attribute value.
     * @param val the new value
     *
     * @see #getDimensionHeight
     * @see #removeDimensionHeight
     */
    public final void setDimensionHeight(int val) {
        setInteger(getDimensionHeightAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>dimensionHeight</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getDimensionHeight
     * @see #setDimensionHeight
     */
    public final void removeDimensionHeight() {
        removeValue(getDimensionHeightAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getDimensionHeight
     * @see #setDimensionHeight
     */
    public final boolean isDimensionHeightDefaultValue() {
        return isDefaultValue(getDimensionHeightAttribute(getMtDatabase()));
    }


    /* Attribute 'dimensionLength' */

    /** Attribute <code>dimensionLength</code> cache ID */
    private static int dimensionLengthCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("dimensionLength",CID));

    /**
     * Gets the <code>dimensionLength</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getDimensionLengthAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(dimensionLengthCID);
    }


    /**
     * Gets the <code>dimensionLength</code> attribute value.
     * @return the value
     *
     * @see #setDimensionLength
     * @see #removeDimensionLength
     */
    public final int getDimensionLength() {
        return getInteger(getDimensionLengthAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>dimensionLength</code> attribute value.
     * @param val the new value
     *
     * @see #getDimensionLength
     * @see #removeDimensionLength
     */
    public final void setDimensionLength(int val) {
        setInteger(getDimensionLengthAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>dimensionLength</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getDimensionLength
     * @see #setDimensionLength
     */
    public final void removeDimensionLength() {
        removeValue(getDimensionLengthAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getDimensionLength
     * @see #setDimensionLength
     */
    public final boolean isDimensionLengthDefaultValue() {
        return isDefaultValue(getDimensionLengthAttribute(getMtDatabase()));
    }


    /* Attribute 'dimensionWidth' */

    /** Attribute <code>dimensionWidth</code> cache ID */
    private static int dimensionWidthCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("dimensionWidth",CID));

    /**
     * Gets the <code>dimensionWidth</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getDimensionWidthAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(dimensionWidthCID);
    }


    /**
     * Gets the <code>dimensionWidth</code> attribute value.
     * @return the value
     *
     * @see #setDimensionWidth
     * @see #removeDimensionWidth
     */
    public final int getDimensionWidth() {
        return getInteger(getDimensionWidthAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>dimensionWidth</code> attribute value.
     * @param val the new value
     *
     * @see #getDimensionWidth
     * @see #removeDimensionWidth
     */
    public final void setDimensionWidth(int val) {
        setInteger(getDimensionWidthAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>dimensionWidth</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getDimensionWidth
     * @see #setDimensionWidth
     */
    public final void removeDimensionWidth() {
        removeValue(getDimensionWidthAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getDimensionWidth
     * @see #setDimensionWidth
     */
    public final boolean isDimensionWidthDefaultValue() {
        return isDefaultValue(getDimensionWidthAttribute(getMtDatabase()));
    }


    /* Attribute 'approxWeight' */

    /** Attribute <code>approxWeight</code> cache ID */
    private static int approxWeightCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("approxWeight",CID));

    /**
     * Gets the <code>approxWeight</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getApproxWeightAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(approxWeightCID);
    }


    /**
     * Gets the <code>approxWeight</code> attribute value.
     * @return the value
     *
     * @see #setApproxWeight
     * @see #removeApproxWeight
     */
    public final double getApproxWeight() {
        return getDouble(getApproxWeightAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>approxWeight</code> attribute value.
     * @param val the new value
     *
     * @see #getApproxWeight
     * @see #removeApproxWeight
     */
    public final void setApproxWeight(double val) {
        setDouble(getApproxWeightAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>approxWeight</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getApproxWeight
     * @see #setApproxWeight
     */
    public final void removeApproxWeight() {
        removeValue(getApproxWeightAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getApproxWeight
     * @see #setApproxWeight
     */
    public final boolean isApproxWeightDefaultValue() {
        return isDefaultValue(getApproxWeightAttribute(getMtDatabase()));
    }


    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public carvings(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[carvings]";
    }
}

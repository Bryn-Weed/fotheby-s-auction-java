/*
 * item.java
 *
 * Generated with Matisse Schema Definition Language 9.1.9
 * Generation date: Sat Apr 21 17:28:04 2018
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

import com.matisse.reflect.*;

/**
 * <code>item</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class item extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.9
     * Generation Date: Sat Apr 21 17:28:04 2018
     */

    /*
     * Class variables and methods
     */

    /** Class <code>item</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("item"));

    /**
     * Gets the <code>item</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public item(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected item(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(item.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, item.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(item.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, item.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'description' */

    /** Attribute <code>description</code> cache ID */
    private static int descriptionCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("description",CID));

    /**
     * Gets the <code>description</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getDescriptionAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(descriptionCID);
    }


    /**
     * Gets the <code>description</code> attribute value.
     * @return the value
     *
     * @see #setDescription
     * @see #removeDescription
     */
    public final String getDescription() {
        return getString(getDescriptionAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>description</code> attribute value.
     * @param val the new value
     *
     * @see #getDescription
     * @see #removeDescription
     */
    public final void setDescription(String val) {
        setString(getDescriptionAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>description</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getDescription
     * @see #setDescription
     */
    public final void removeDescription() {
        removeValue(getDescriptionAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getDescription
     * @see #setDescription
     */
    public final boolean isDescriptionDefaultValue() {
        return isDefaultValue(getDescriptionAttribute(getMtDatabase()));
    }


    /* Attribute 'itemNo' */

    /** Attribute <code>itemNo</code> cache ID */
    private static int itemNoCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("itemNo",CID));

    /**
     * Gets the <code>itemNo</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getItemNoAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(itemNoCID);
    }


    /**
     * Gets the <code>itemNo</code> attribute value.
     * @return the value
     *
     * @see #setItemNo
     * @see #removeItemNo
     */
    public final int getItemNo() {
        return getInteger(getItemNoAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>itemNo</code> attribute value.
     * @param val the new value
     *
     * @see #getItemNo
     * @see #removeItemNo
     */
    public final void setItemNo(int val) {
        setInteger(getItemNoAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>itemNo</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getItemNo
     * @see #setItemNo
     */
    public final void removeItemNo() {
        removeValue(getItemNoAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getItemNo
     * @see #setItemNo
     */
    public final boolean isItemNoDefaultValue() {
        return isDefaultValue(getItemNoAttribute(getMtDatabase()));
    }


    /* Attribute 'yearOfProduction' */

    /** Attribute <code>yearOfProduction</code> cache ID */
    private static int yearOfProductionCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("yearOfProduction",CID));

    /**
     * Gets the <code>yearOfProduction</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getYearOfProductionAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(yearOfProductionCID);
    }


    /**
     * Gets the <code>yearOfProduction</code> attribute value.
     * @return the value
     *
     * @see #setYearOfProduction
     * @see #removeYearOfProduction
     */
    public final String getYearOfProduction() {
        return getString(getYearOfProductionAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>yearOfProduction</code> attribute value.
     * @param val the new value
     *
     * @see #getYearOfProduction
     * @see #removeYearOfProduction
     */
    public final void setYearOfProduction(String val) {
        setString(getYearOfProductionAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>yearOfProduction</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getYearOfProduction
     * @see #setYearOfProduction
     */
    public final void removeYearOfProduction() {
        removeValue(getYearOfProductionAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getYearOfProduction
     * @see #setYearOfProduction
     */
    public final boolean isYearOfProductionDefaultValue() {
        return isDefaultValue(getYearOfProductionAttribute(getMtDatabase()));
    }

    /* EntryPoint 'searchProductionDate' of attribute 'yearOfProduction' */

    /** EntryPointDictionary <code>searchProductionDate</code> cache ID */
    private static int searchProductionDateDictionaryCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtEntryPointDictionary.Loader("searchProductionDate"));

    /**
     * Gets the <code>searchProductionDate</code> entry point dictionary descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the dictionary
     * @return the entry point dictionary descriptor object
     */
    public static com.matisse.reflect.MtEntryPointDictionary getSearchProductionDateDictionary(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtEntryPointDictionary)db.getCachedObject(searchProductionDateDictionaryCID);
    }

    /**
     * Finds the <code>item</code> object where <code>yearOfProduction</code> matches this value.
     * @param db a database
     * @param value the search string
     * @return the matching <code>item</code> or <code>null</code> if none was found
     * @throws MtException if more than one match found
     */
    public static item lookupSearchProductionDate(com.matisse.MtDatabase db, String value) {
        return (item)getSearchProductionDateDictionary(db).lookup(value, getClass(db));
    }

    /**
     * Creates an iterator on all <code>item</code> objects where <code>yearOfProduction</code> matches this value.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> searchProductionDateIterator(com.matisse.MtDatabase db, String value) {
        return getSearchProductionDateDictionary(db).<E>iterator(value, getClass(db), item.class);
    }

    /**
     * Creates an iterator on all <code>item</code> objects where <code>yearOfProduction</code> matches this value.
     * Use this method to restrict the iterator to members of a subclass of this class,
     * or to set a maximum number of objects.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param numObjPerBuffer maximum number of objects to include in the iterator
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> searchProductionDateIterator(com.matisse.MtDatabase db, String value, com.matisse.reflect.MtClass filterClass, int numObjPerBuffer) {
        return getSearchProductionDateDictionary(db).<E>iterator(value, filterClass, numObjPerBuffer, item.class);
    }


    /* Attribute 'classification' */

    /** Attribute <code>classification</code> cache ID */
    private static int classificationCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("classification",CID));

    /**
     * Gets the <code>classification</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getClassificationAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(classificationCID);
    }


    /**
     * Gets the <code>classification</code> attribute value.
     * @return the value
     *
     * @see #setClassification
     * @see #removeClassification
     */
    public final String getClassification() {
        return getString(getClassificationAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>classification</code> attribute value.
     * @param val the new value
     *
     * @see #getClassification
     * @see #removeClassification
     */
    public final void setClassification(String val) {
        setString(getClassificationAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>classification</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getClassification
     * @see #setClassification
     */
    public final void removeClassification() {
        removeValue(getClassificationAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getClassification
     * @see #setClassification
     */
    public final boolean isClassificationDefaultValue() {
        return isDefaultValue(getClassificationAttribute(getMtDatabase()));
    }

    /* EntryPoint 'searchClassification' of attribute 'classification' */

    /** EntryPointDictionary <code>searchClassification</code> cache ID */
    private static int searchClassificationDictionaryCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtEntryPointDictionary.Loader("searchClassification"));

    /**
     * Gets the <code>searchClassification</code> entry point dictionary descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the dictionary
     * @return the entry point dictionary descriptor object
     */
    public static com.matisse.reflect.MtEntryPointDictionary getSearchClassificationDictionary(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtEntryPointDictionary)db.getCachedObject(searchClassificationDictionaryCID);
    }

    /**
     * Finds the <code>item</code> object where <code>classification</code> matches this value.
     * @param db a database
     * @param value the search string
     * @return the matching <code>item</code> or <code>null</code> if none was found
     * @throws MtException if more than one match found
     */
    public static item lookupSearchClassification(com.matisse.MtDatabase db, String value) {
        return (item)getSearchClassificationDictionary(db).lookup(value, getClass(db));
    }

    /**
     * Creates an iterator on all <code>item</code> objects where <code>classification</code> matches this value.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> searchClassificationIterator(com.matisse.MtDatabase db, String value) {
        return getSearchClassificationDictionary(db).<E>iterator(value, getClass(db), item.class);
    }

    /**
     * Creates an iterator on all <code>item</code> objects where <code>classification</code> matches this value.
     * Use this method to restrict the iterator to members of a subclass of this class,
     * or to set a maximum number of objects.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param numObjPerBuffer maximum number of objects to include in the iterator
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> searchClassificationIterator(com.matisse.MtDatabase db, String value, com.matisse.reflect.MtClass filterClass, int numObjPerBuffer) {
        return getSearchClassificationDictionary(db).<E>iterator(value, filterClass, numObjPerBuffer, item.class);
    }


    /* Attribute 'auctionDate' */

    /** Attribute <code>auctionDate</code> cache ID */
    private static int auctionDateCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("auctionDate",CID));

    /**
     * Gets the <code>auctionDate</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getAuctionDateAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(auctionDateCID);
    }


    /**
     * Gets the <code>auctionDate</code> attribute value.
     * @return the value
     *
     * @see #setAuctionDate
     * @see #removeAuctionDate
     */
    public final java.util.GregorianCalendar getAuctionDate() {
        return getDate(getAuctionDateAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>auctionDate</code> attribute value.
     * @param val the new value
     *
     * @see #getAuctionDate
     * @see #removeAuctionDate
     */
    public final void setAuctionDate(java.util.GregorianCalendar val) {
        setDate(getAuctionDateAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>auctionDate</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getAuctionDate
     * @see #setAuctionDate
     */
    public final void removeAuctionDate() {
        removeValue(getAuctionDateAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getAuctionDate
     * @see #setAuctionDate
     */
    public final boolean isAuctionDateDefaultValue() {
        return isDefaultValue(getAuctionDateAttribute(getMtDatabase()));
    }


    /* Attribute 'estPrice' */

    /** Attribute <code>estPrice</code> cache ID */
    private static int estPriceCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("estPrice",CID));

    /**
     * Gets the <code>estPrice</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getEstPriceAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(estPriceCID);
    }


    /**
     * Gets the <code>estPrice</code> attribute value.
     * @return the value
     *
     * @see #setEstPrice
     * @see #removeEstPrice
     */
    public final double getEstPrice() {
        return getDouble(getEstPriceAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>estPrice</code> attribute value.
     * @param val the new value
     *
     * @see #getEstPrice
     * @see #removeEstPrice
     */
    public final void setEstPrice(double val) {
        setDouble(getEstPriceAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>estPrice</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getEstPrice
     * @see #setEstPrice
     */
    public final void removeEstPrice() {
        removeValue(getEstPriceAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getEstPrice
     * @see #setEstPrice
     */
    public final boolean isEstPriceDefaultValue() {
        return isDefaultValue(getEstPriceAttribute(getMtDatabase()));
    }


    /* Attribute 'clientNo' */

    /** Attribute <code>clientNo</code> cache ID */
    private static int clientNoCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("clientNo",CID));

    /**
     * Gets the <code>clientNo</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getClientNoAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(clientNoCID);
    }


    /**
     * Gets the <code>clientNo</code> attribute value.
     * @return the value
     *
     * @see #setClientNo
     * @see #removeClientNo
     */
    public final String getClientNo() {
        return getString(getClientNoAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>clientNo</code> attribute value.
     * @param val the new value
     *
     * @see #getClientNo
     * @see #removeClientNo
     */
    public final void setClientNo(String val) {
        setString(getClientNoAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>clientNo</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getClientNo
     * @see #setClientNo
     */
    public final void removeClientNo() {
        removeValue(getClientNoAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getClientNo
     * @see #setClientNo
     */
    public final boolean isClientNoDefaultValue() {
        return isDefaultValue(getClientNoAttribute(getMtDatabase()));
    }


    /* Attribute 'reservePrice' */

    /** Attribute <code>reservePrice</code> cache ID */
    private static int reservePriceCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("reservePrice",CID));

    /**
     * Gets the <code>reservePrice</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getReservePriceAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(reservePriceCID);
    }


    /**
     * Gets the <code>reservePrice</code> attribute value.
     * @return the value
     *
     * @see #setReservePrice
     * @see #removeReservePrice
     */
    public final double getReservePrice() {
        return getDouble(getReservePriceAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>reservePrice</code> attribute value.
     * @param val the new value
     *
     * @see #getReservePrice
     * @see #removeReservePrice
     */
    public final void setReservePrice(double val) {
        setDouble(getReservePriceAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>reservePrice</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getReservePrice
     * @see #setReservePrice
     */
    public final void removeReservePrice() {
        removeValue(getReservePriceAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getReservePrice
     * @see #setReservePrice
     */
    public final boolean isReservePriceDefaultValue() {
        return isDefaultValue(getReservePriceAttribute(getMtDatabase()));
    }


    /* Attribute 'commissionBid' */

    /** Attribute <code>commissionBid</code> cache ID */
    private static int commissionBidCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("commissionBid",CID));

    /**
     * Gets the <code>commissionBid</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getCommissionBidAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(commissionBidCID);
    }


    /**
     * Gets the <code>commissionBid</code> attribute value.
     * @return the value
     *
     * @see #setCommissionBid
     * @see #removeCommissionBid
     */
    public final String getCommissionBid() {
        return getString(getCommissionBidAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>commissionBid</code> attribute value.
     * @param val the new value
     *
     * @see #getCommissionBid
     * @see #removeCommissionBid
     */
    public final void setCommissionBid(String val) {
        setString(getCommissionBidAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>commissionBid</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getCommissionBid
     * @see #setCommissionBid
     */
    public final void removeCommissionBid() {
        removeValue(getCommissionBidAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getCommissionBid
     * @see #setCommissionBid
     */
    public final boolean isCommissionBidDefaultValue() {
        return isDefaultValue(getCommissionBidAttribute(getMtDatabase()));
    }


    /* Attribute 'commissionBidAmount' */

    /** Attribute <code>commissionBidAmount</code> cache ID */
    private static int commissionBidAmountCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("commissionBidAmount",CID));

    /**
     * Gets the <code>commissionBidAmount</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getCommissionBidAmountAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(commissionBidAmountCID);
    }


    /**
     * Gets the <code>commissionBidAmount</code> attribute value.
     * @return the value
     *
     * @see #setCommissionBidAmount
     * @see #removeCommissionBidAmount
     */
    public final double getCommissionBidAmount() {
        return getDouble(getCommissionBidAmountAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>commissionBidAmount</code> attribute value.
     * @param val the new value
     *
     * @see #getCommissionBidAmount
     * @see #removeCommissionBidAmount
     */
    public final void setCommissionBidAmount(double val) {
        setDouble(getCommissionBidAmountAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>commissionBidAmount</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getCommissionBidAmount
     * @see #setCommissionBidAmount
     */
    public final void removeCommissionBidAmount() {
        removeValue(getCommissionBidAmountAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getCommissionBidAmount
     * @see #setCommissionBidAmount
     */
    public final boolean isCommissionBidAmountDefaultValue() {
        return isDefaultValue(getCommissionBidAmountAttribute(getMtDatabase()));
    }


    /* Attribute 'image' */

    /** Attribute <code>image</code> cache ID */
    private static int imageCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("image",CID));

    /**
     * Gets the <code>image</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getImageAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(imageCID);
    }


    /**
     * Gets the <code>image</code> attribute value.
     * @return the value
     *
     * @see #setImage
     * @see #removeImage
     */
    public final byte[] getImage() {
        return getImage(getImageAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>image</code> attribute value.
     * @param val the new value
     *
     * @see #getImage
     * @see #removeImage
     */
    public final void setImage(byte[] val) {
        setImage(getImageAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>image</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getImage
     * @see #setImage
     */
    public final void removeImage() {
        removeValue(getImageAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getImage
     * @see #setImage
     */
    public final boolean isImageDefaultValue() {
        return isDefaultValue(getImageAttribute(getMtDatabase()));
    }

    /**
     * Gets the <code>image</code> attribute list size.
     * @return the number of elements in the list
     *
     * @see #setImageElements
     * @see #getImageElements
     */
    public final long getImageSize() {
        return getListSize(getImageAttribute(getMtDatabase()));
    }

    /**
     * Reads <code>image</code> attribute value elements into a portion of an array.
     * @param value destination buffer
     * @param offset offset at which to start storing elements
     * @param len the maximum number of elements to read
     * @return the number of elements read
     *
     * @see #setImageElements
     * @see #getImageSize
     */
    public final int getImageElements(byte[] value, long offset, int len) {
        return getImageElements(getImageAttribute(getMtDatabase()), value, len, offset);
    }

    /**
     * Writes a portion of an array of elements to the <code>image</code> attribute value.
     * @param value an array of elements
     * @param offset offset from which to start writing characters
     * @param len number of characters to write
     * @param discardAfter truncate the remaining part of the attribute
     *
     * @see #getImageElements
     * @see #getImageSize
     */
    public final void setImageElements(byte[] value, long offset, int len, boolean discardAfter) {
        setImageElements(getImageAttribute(getMtDatabase()), value, len, offset, discardAfter);
    }


    /* Attribute 'artistName' */

    /** Attribute <code>artistName</code> cache ID */
    private static int artistNameCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("artistName",CID));

    /**
     * Gets the <code>artistName</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getArtistNameAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(artistNameCID);
    }


    /**
     * Gets the <code>artistName</code> attribute value.
     * @return the value
     *
     * @see #setArtistName
     * @see #removeArtistName
     */
    public final String getArtistName() {
        return getString(getArtistNameAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>artistName</code> attribute value.
     * @param val the new value
     *
     * @see #getArtistName
     * @see #removeArtistName
     */
    public final void setArtistName(String val) {
        setString(getArtistNameAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>artistName</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getArtistName
     * @see #setArtistName
     */
    public final void removeArtistName() {
        removeValue(getArtistNameAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getArtistName
     * @see #setArtistName
     */
    public final boolean isArtistNameDefaultValue() {
        return isDefaultValue(getArtistNameAttribute(getMtDatabase()));
    }

    /* EntryPoint 'searchArtist' of attribute 'artistName' */

    /** EntryPointDictionary <code>searchArtist</code> cache ID */
    private static int searchArtistDictionaryCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtEntryPointDictionary.Loader("searchArtist"));

    /**
     * Gets the <code>searchArtist</code> entry point dictionary descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the dictionary
     * @return the entry point dictionary descriptor object
     */
    public static com.matisse.reflect.MtEntryPointDictionary getSearchArtistDictionary(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtEntryPointDictionary)db.getCachedObject(searchArtistDictionaryCID);
    }

    /**
     * Finds the <code>item</code> object where <code>artistName</code> matches this value.
     * @param db a database
     * @param value the search string
     * @return the matching <code>item</code> or <code>null</code> if none was found
     * @throws MtException if more than one match found
     */
    public static item lookupSearchArtist(com.matisse.MtDatabase db, String value) {
        return (item)getSearchArtistDictionary(db).lookup(value, getClass(db));
    }

    /**
     * Creates an iterator on all <code>item</code> objects where <code>artistName</code> matches this value.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> searchArtistIterator(com.matisse.MtDatabase db, String value) {
        return getSearchArtistDictionary(db).<E>iterator(value, getClass(db), item.class);
    }

    /**
     * Creates an iterator on all <code>item</code> objects where <code>artistName</code> matches this value.
     * Use this method to restrict the iterator to members of a subclass of this class,
     * or to set a maximum number of objects.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param numObjPerBuffer maximum number of objects to include in the iterator
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> searchArtistIterator(com.matisse.MtDatabase db, String value, com.matisse.reflect.MtClass filterClass, int numObjPerBuffer) {
        return getSearchArtistDictionary(db).<E>iterator(value, filterClass, numObjPerBuffer, item.class);
    }


    /* Attribute 'lotNumber' */

    /** Attribute <code>lotNumber</code> cache ID */
    private static int lotNumberCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("lotNumber",CID));

    /**
     * Gets the <code>lotNumber</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getLotNumberAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(lotNumberCID);
    }


    /**
     * Gets the <code>lotNumber</code> attribute value.
     * @return the value
     *
     * @see #setLotNumber
     * @see #removeLotNumber
     */
    public final double getLotNumber() {
        return getDouble(getLotNumberAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>lotNumber</code> attribute value.
     * @param val the new value
     *
     * @see #getLotNumber
     * @see #removeLotNumber
     */
    public final void setLotNumber(double val) {
        setDouble(getLotNumberAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>lotNumber</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getLotNumber
     * @see #setLotNumber
     */
    public final void removeLotNumber() {
        removeValue(getLotNumberAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getLotNumber
     * @see #setLotNumber
     */
    public final boolean isLotNumberDefaultValue() {
        return isDefaultValue(getLotNumberAttribute(getMtDatabase()));
    }


    /*
     * Relationship access methods
     */

    /* Relationship 'hasItem' */

    /** Relationship <code>hasItem</code> cache ID */
    private static int hasItemCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("hasItem",CID));

    /**
     * Gets the <code>hasItem</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getHasItemRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(hasItemCID);
    }

    /**
     * Gets the <code>hasItem</code> relationship's successors.
     * @return an array of objects
     *
     * @see #getHasItemSize
     * @see #hasItemIterator
     */
    public final person[] getHasItem() {
        return (person[])getSuccessors(getHasItemRelationship(getMtDatabase()), person.class);
    }

    /**
     * Counts the <code>hasItem</code> relationship's successors.
     * @return the number of successors
     *
     * @see #getHasItem
     * @see #hasItemIterator
     */
    public final int getHasItemSize() {
        return getSuccessorSize(getHasItemRelationship(getMtDatabase()));
    }

    /**
     * Opens an iterator on the <code>hasItem</code> relationship's successors.
     * @param <E> a MtObject class     * @return an object iterator
     *
     * @see #getHasItem
     * @see #getHasItemSize
     */
    public final <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> hasItemIterator() {
        return this.<E>successorIterator(getHasItemRelationship(getMtDatabase()), person.class);
    }


    /*
     * Index access methods
     */

    /* Index 'FindItem' */

    /** Index <code>FindItem</code> cache ID */
    private static int findItemIndexCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtIndex.Loader("FindItem"));

    /**
     * Gets the <code>FindItem</code> index descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return an index descriptor object
     */
    public static com.matisse.reflect.MtIndex getFindItemIndex(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtIndex)db.getCachedObject(findItemIndexCID);
    }

    /**
     * Finds one <code>item</code> object in index <code>FindItem</code>.
     * @param db a database
     * @param lotNumber search parameter
     * @return the matching <code>item</code> object or <code>null</code> if none was found
     */
    public static item lookupFindItem(com.matisse.MtDatabase db, double lotNumber) {
        return (item)getFindItemIndex(db).lookup(new Object[] {new Double(lotNumber)}, getClass(db));
    }

    /**
     * Finds <code>item</code> objects in index <code>FindItem</code>.
     * @param db a database
     * @param lotNumber search parameter
     * @return the matching <code>item</code> objects or an empty array if none was found
     */
    public static item[] lookupObjectsFindItem(com.matisse.MtDatabase db, double lotNumber) {
        return (item[])getFindItemIndex(db).lookupObjects(new Object[] {new Double(lotNumber)}, getClass(db), item.class);
    }

    /**
     * Opens an iterator on index <code>FindItem</code> for class <code>item</code>.
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromLotNumber search parameter
     * @param toLotNumber search parameter
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> findItemIterator(com.matisse.MtDatabase db, double fromLotNumber, double toLotNumber) {
        return getFindItemIndex(db).<E>iterator(new Object[] {new Double(fromLotNumber)}, new Object[] {new Double(toLotNumber)}, getClass(db), com.matisse.reflect.MtIndex.DIRECT, com.matisse.MtDatabase.MAX_PREFETCHING, item.class);
    }

    /**
     * Opens an iterator on index <code>FindItem</code> for class <code>item</code>. 
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromLotNumber search parameter
     * @param toLotNumber search parameter
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param direction MtIndex.DIRECT or MtIndex.REVERSE
     * @param numObjPerBuffer maximum number of objects to be retrieved in each request to server
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> findItemIterator(com.matisse.MtDatabase db, double fromLotNumber, double toLotNumber, com.matisse.reflect.MtClass filterClass, int direction, int numObjPerBuffer) {
        return getFindItemIndex(db).iterator(new Object[] {new Double(fromLotNumber)}, new Object[] {new Double(toLotNumber)}, filterClass, direction, numObjPerBuffer, item.class);
    }

    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public item(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[item]";
    }
}

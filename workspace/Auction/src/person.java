/*
 * person.java
 *
 * Generated with Matisse Schema Definition Language 9.1.9
 * Generation date: Sat Apr 21 17:28:07 2018
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

import com.matisse.reflect.*;

/**
 * <code>person</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class person extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.9
     * Generation Date: Sat Apr 21 17:28:07 2018
     */

    /*
     * Class variables and methods
     */

    /** Class <code>person</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("person"));

    /**
     * Gets the <code>person</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public person(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected person(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(person.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, person.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(person.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, person.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'Title' */

    /** Attribute <code>Title</code> cache ID */
    private static int titleCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Title",CID));

    /**
     * Gets the <code>Title</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getTitleAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(titleCID);
    }


    /**
     * Gets the <code>Title</code> attribute value.
     * @return the value
     *
     * @see #setTitle
     * @see #removeTitle
     */
    public final String getTitle() {
        return getString(getTitleAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Title</code> attribute value.
     * @param val the new value
     *
     * @see #getTitle
     * @see #removeTitle
     */
    public final void setTitle(String val) {
        setString(getTitleAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Title</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getTitle
     * @see #setTitle
     */
    public final void removeTitle() {
        removeValue(getTitleAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getTitle
     * @see #setTitle
     */
    public final boolean isTitleDefaultValue() {
        return isDefaultValue(getTitleAttribute(getMtDatabase()));
    }


    /* Attribute 'Firstname' */

    /** Attribute <code>Firstname</code> cache ID */
    private static int firstnameCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Firstname",CID));

    /**
     * Gets the <code>Firstname</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getFirstnameAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(firstnameCID);
    }


    /**
     * Gets the <code>Firstname</code> attribute value.
     * @return the value
     *
     * @see #setFirstname
     * @see #removeFirstname
     */
    public final String getFirstname() {
        return getString(getFirstnameAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Firstname</code> attribute value.
     * @param val the new value
     *
     * @see #getFirstname
     * @see #removeFirstname
     */
    public final void setFirstname(String val) {
        setString(getFirstnameAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Firstname</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getFirstname
     * @see #setFirstname
     */
    public final void removeFirstname() {
        removeValue(getFirstnameAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getFirstname
     * @see #setFirstname
     */
    public final boolean isFirstnameDefaultValue() {
        return isDefaultValue(getFirstnameAttribute(getMtDatabase()));
    }

    /* EntryPoint 'searchName' of attribute 'Firstname' */

    /** EntryPointDictionary <code>searchName</code> cache ID */
    private static int searchNameDictionaryCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtEntryPointDictionary.Loader("searchName"));

    /**
     * Gets the <code>searchName</code> entry point dictionary descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the dictionary
     * @return the entry point dictionary descriptor object
     */
    public static com.matisse.reflect.MtEntryPointDictionary getSearchNameDictionary(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtEntryPointDictionary)db.getCachedObject(searchNameDictionaryCID);
    }

    /**
     * Finds the <code>person</code> object where <code>Firstname</code> matches this value.
     * @param db a database
     * @param value the search string
     * @return the matching <code>person</code> or <code>null</code> if none was found
     * @throws MtException if more than one match found
     */
    public static person lookupSearchName(com.matisse.MtDatabase db, String value) {
        return (person)getSearchNameDictionary(db).lookup(value, getClass(db));
    }

    /**
     * Creates an iterator on all <code>person</code> objects where <code>Firstname</code> matches this value.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> searchNameIterator(com.matisse.MtDatabase db, String value) {
        return getSearchNameDictionary(db).<E>iterator(value, getClass(db), person.class);
    }

    /**
     * Creates an iterator on all <code>person</code> objects where <code>Firstname</code> matches this value.
     * Use this method to restrict the iterator to members of a subclass of this class,
     * or to set a maximum number of objects.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param numObjPerBuffer maximum number of objects to include in the iterator
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> searchNameIterator(com.matisse.MtDatabase db, String value, com.matisse.reflect.MtClass filterClass, int numObjPerBuffer) {
        return getSearchNameDictionary(db).<E>iterator(value, filterClass, numObjPerBuffer, person.class);
    }


    /* Attribute 'Surname' */

    /** Attribute <code>Surname</code> cache ID */
    private static int surnameCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Surname",CID));

    /**
     * Gets the <code>Surname</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getSurnameAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(surnameCID);
    }


    /**
     * Gets the <code>Surname</code> attribute value.
     * @return the value
     *
     * @see #setSurname
     * @see #removeSurname
     */
    public final String getSurname() {
        return getString(getSurnameAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Surname</code> attribute value.
     * @param val the new value
     *
     * @see #getSurname
     * @see #removeSurname
     */
    public final void setSurname(String val) {
        setString(getSurnameAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Surname</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getSurname
     * @see #setSurname
     */
    public final void removeSurname() {
        removeValue(getSurnameAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getSurname
     * @see #setSurname
     */
    public final boolean isSurnameDefaultValue() {
        return isDefaultValue(getSurnameAttribute(getMtDatabase()));
    }


    /* Attribute 'Address' */

    /** Attribute <code>Address</code> cache ID */
    private static int addressCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Address",CID));

    /**
     * Gets the <code>Address</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getAddressAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(addressCID);
    }


    /**
     * Gets the <code>Address</code> attribute value.
     * @return the value
     *
     * @see #setAddress
     * @see #removeAddress
     */
    public final String getAddress() {
        return getString(getAddressAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Address</code> attribute value.
     * @param val the new value
     *
     * @see #getAddress
     * @see #removeAddress
     */
    public final void setAddress(String val) {
        setString(getAddressAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Address</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getAddress
     * @see #setAddress
     */
    public final void removeAddress() {
        removeValue(getAddressAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getAddress
     * @see #setAddress
     */
    public final boolean isAddressDefaultValue() {
        return isDefaultValue(getAddressAttribute(getMtDatabase()));
    }


    /* Attribute 'Number' */

    /** Attribute <code>Number</code> cache ID */
    private static int numberCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Number",CID));

    /**
     * Gets the <code>Number</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getNumberAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(numberCID);
    }


    /**
     * Gets the <code>Number</code> attribute value.
     * @return the value
     *
     * @see #setNumber
     * @see #removeNumber
     */
    public final String getNumber() {
        return getString(getNumberAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Number</code> attribute value.
     * @param val the new value
     *
     * @see #getNumber
     * @see #removeNumber
     */
    public final void setNumber(String val) {
        setString(getNumberAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Number</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getNumber
     * @see #setNumber
     */
    public final void removeNumber() {
        removeValue(getNumberAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getNumber
     * @see #setNumber
     */
    public final boolean isNumberDefaultValue() {
        return isDefaultValue(getNumberAttribute(getMtDatabase()));
    }


    /* Attribute 'Email' */

    /** Attribute <code>Email</code> cache ID */
    private static int emailCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Email",CID));

    /**
     * Gets the <code>Email</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getEmailAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(emailCID);
    }


    /**
     * Gets the <code>Email</code> attribute value.
     * @return the value
     *
     * @see #setEmail
     * @see #removeEmail
     */
    public final String getEmail() {
        return getString(getEmailAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Email</code> attribute value.
     * @param val the new value
     *
     * @see #getEmail
     * @see #removeEmail
     */
    public final void setEmail(String val) {
        setString(getEmailAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Email</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getEmail
     * @see #setEmail
     */
    public final void removeEmail() {
        removeValue(getEmailAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getEmail
     * @see #setEmail
     */
    public final boolean isEmailDefaultValue() {
        return isDefaultValue(getEmailAttribute(getMtDatabase()));
    }


    /* Attribute 'Status' */

    /** Attribute <code>Status</code> cache ID */
    private static int statusCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Status",CID));

    /**
     * Gets the <code>Status</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getStatusAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(statusCID);
    }


    /**
     * Gets the <code>Status</code> attribute value.
     * @return the value
     *
     * @see #setStatus
     * @see #removeStatus
     */
    public final String getStatus() {
        return getString(getStatusAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Status</code> attribute value.
     * @param val the new value
     *
     * @see #getStatus
     * @see #removeStatus
     */
    public final void setStatus(String val) {
        setString(getStatusAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Status</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getStatus
     * @see #setStatus
     */
    public final void removeStatus() {
        removeValue(getStatusAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getStatus
     * @see #setStatus
     */
    public final boolean isStatusDefaultValue() {
        return isDefaultValue(getStatusAttribute(getMtDatabase()));
    }

    /* EntryPoint 'searchStatus' of attribute 'Status' */

    /** EntryPointDictionary <code>searchStatus</code> cache ID */
    private static int searchStatusDictionaryCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtEntryPointDictionary.Loader("searchStatus"));

    /**
     * Gets the <code>searchStatus</code> entry point dictionary descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the dictionary
     * @return the entry point dictionary descriptor object
     */
    public static com.matisse.reflect.MtEntryPointDictionary getSearchStatusDictionary(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtEntryPointDictionary)db.getCachedObject(searchStatusDictionaryCID);
    }

    /**
     * Finds the <code>person</code> object where <code>Status</code> matches this value.
     * @param db a database
     * @param value the search string
     * @return the matching <code>person</code> or <code>null</code> if none was found
     * @throws MtException if more than one match found
     */
    public static person lookupSearchStatus(com.matisse.MtDatabase db, String value) {
        return (person)getSearchStatusDictionary(db).lookup(value, getClass(db));
    }

    /**
     * Creates an iterator on all <code>person</code> objects where <code>Status</code> matches this value.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> searchStatusIterator(com.matisse.MtDatabase db, String value) {
        return getSearchStatusDictionary(db).<E>iterator(value, getClass(db), person.class);
    }

    /**
     * Creates an iterator on all <code>person</code> objects where <code>Status</code> matches this value.
     * Use this method to restrict the iterator to members of a subclass of this class,
     * or to set a maximum number of objects.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param numObjPerBuffer maximum number of objects to include in the iterator
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> searchStatusIterator(com.matisse.MtDatabase db, String value, com.matisse.reflect.MtClass filterClass, int numObjPerBuffer) {
        return getSearchStatusDictionary(db).<E>iterator(value, filterClass, numObjPerBuffer, person.class);
    }


    /* Attribute 'Approved' */

    /** Attribute <code>Approved</code> cache ID */
    private static int approvedCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Approved",CID));

    /**
     * Gets the <code>Approved</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getApprovedAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(approvedCID);
    }


    /**
     * Gets the <code>Approved</code> attribute value.
     * @return the value
     *
     * @see #setApproved
     * @see #removeApproved
     */
    public final String getApproved() {
        return getString(getApprovedAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Approved</code> attribute value.
     * @param val the new value
     *
     * @see #getApproved
     * @see #removeApproved
     */
    public final void setApproved(String val) {
        setString(getApprovedAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Approved</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getApproved
     * @see #setApproved
     */
    public final void removeApproved() {
        removeValue(getApprovedAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getApproved
     * @see #setApproved
     */
    public final boolean isApprovedDefaultValue() {
        return isDefaultValue(getApprovedAttribute(getMtDatabase()));
    }

    /* EntryPoint 'searchApproved' of attribute 'Approved' */

    /** EntryPointDictionary <code>searchApproved</code> cache ID */
    private static int searchApprovedDictionaryCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtEntryPointDictionary.Loader("searchApproved"));

    /**
     * Gets the <code>searchApproved</code> entry point dictionary descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the dictionary
     * @return the entry point dictionary descriptor object
     */
    public static com.matisse.reflect.MtEntryPointDictionary getSearchApprovedDictionary(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtEntryPointDictionary)db.getCachedObject(searchApprovedDictionaryCID);
    }

    /**
     * Finds the <code>person</code> object where <code>Approved</code> matches this value.
     * @param db a database
     * @param value the search string
     * @return the matching <code>person</code> or <code>null</code> if none was found
     * @throws MtException if more than one match found
     */
    public static person lookupSearchApproved(com.matisse.MtDatabase db, String value) {
        return (person)getSearchApprovedDictionary(db).lookup(value, getClass(db));
    }

    /**
     * Creates an iterator on all <code>person</code> objects where <code>Approved</code> matches this value.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> searchApprovedIterator(com.matisse.MtDatabase db, String value) {
        return getSearchApprovedDictionary(db).<E>iterator(value, getClass(db), person.class);
    }

    /**
     * Creates an iterator on all <code>person</code> objects where <code>Approved</code> matches this value.
     * Use this method to restrict the iterator to members of a subclass of this class,
     * or to set a maximum number of objects.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param numObjPerBuffer maximum number of objects to include in the iterator
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> searchApprovedIterator(com.matisse.MtDatabase db, String value, com.matisse.reflect.MtClass filterClass, int numObjPerBuffer) {
        return getSearchApprovedDictionary(db).<E>iterator(value, filterClass, numObjPerBuffer, person.class);
    }


    /* Attribute 'Account' */

    /** Attribute <code>Account</code> cache ID */
    private static int accountCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Account",CID));

    /**
     * Gets the <code>Account</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getAccountAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(accountCID);
    }


    /**
     * Gets the <code>Account</code> attribute value.
     * @return the value
     *
     * @see #setAccount
     * @see #removeAccount
     */
    public final String getAccount() {
        return getString(getAccountAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Account</code> attribute value.
     * @param val the new value
     *
     * @see #getAccount
     * @see #removeAccount
     */
    public final void setAccount(String val) {
        setString(getAccountAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Account</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getAccount
     * @see #setAccount
     */
    public final void removeAccount() {
        removeValue(getAccountAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getAccount
     * @see #setAccount
     */
    public final boolean isAccountDefaultValue() {
        return isDefaultValue(getAccountAttribute(getMtDatabase()));
    }


    /* Attribute 'Sortcode' */

    /** Attribute <code>Sortcode</code> cache ID */
    private static int sortcodeCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Sortcode",CID));

    /**
     * Gets the <code>Sortcode</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getSortcodeAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(sortcodeCID);
    }


    /**
     * Gets the <code>Sortcode</code> attribute value.
     * @return the value
     *
     * @see #setSortcode
     * @see #removeSortcode
     */
    public final double getSortcode() {
        return getDouble(getSortcodeAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Sortcode</code> attribute value.
     * @param val the new value
     *
     * @see #getSortcode
     * @see #removeSortcode
     */
    public final void setSortcode(double val) {
        setDouble(getSortcodeAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Sortcode</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getSortcode
     * @see #setSortcode
     */
    public final void removeSortcode() {
        removeValue(getSortcodeAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getSortcode
     * @see #setSortcode
     */
    public final boolean isSortcodeDefaultValue() {
        return isDefaultValue(getSortcodeAttribute(getMtDatabase()));
    }


    /* Attribute 'PersonNo' */

    /** Attribute <code>PersonNo</code> cache ID */
    private static int personNoCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("PersonNo",CID));

    /**
     * Gets the <code>PersonNo</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getPersonNoAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(personNoCID);
    }


    /**
     * Gets the <code>PersonNo</code> attribute value.
     * @return the value
     *
     * @see #setPersonNo
     * @see #removePersonNo
     */
    public final int getPersonNo() {
        return getInteger(getPersonNoAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>PersonNo</code> attribute value.
     * @param val the new value
     *
     * @see #getPersonNo
     * @see #removePersonNo
     */
    public final void setPersonNo(int val) {
        setInteger(getPersonNoAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>PersonNo</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getPersonNo
     * @see #setPersonNo
     */
    public final void removePersonNo() {
        removeValue(getPersonNoAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getPersonNo
     * @see #setPersonNo
     */
    public final boolean isPersonNoDefaultValue() {
        return isDefaultValue(getPersonNoAttribute(getMtDatabase()));
    }


    /*
     * Relationship access methods
     */

    /* Relationship 'hasOwner' */

    /** Relationship <code>hasOwner</code> cache ID */
    private static int hasOwnerCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("hasOwner",CID));

    /**
     * Gets the <code>hasOwner</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getHasOwnerRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(hasOwnerCID);
    }

    /**
     * Gets the <code>hasOwner</code> sucessor object.
     * @return an object 
     *
     * @see #setHasOwner
     * @see #clearHasOwner
     */
    public final item getHasOwner() {
        return (item)getSuccessor(getHasOwnerRelationship(getMtDatabase()));
    }

    /**
     * Sets the <code>hasOwner</code> successor object. It is not necessary to clear the
     * relationship before setting a new successor.
     * @param succ the new successor object
     *
     * @see #getHasOwner
     * @see #clearHasOwner
     */
    public final void setHasOwner(item succ) {
        setSuccessor(getHasOwnerRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>hasOwner</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearHasOwner() {
        clearSuccessors(getHasOwnerRelationship(getMtDatabase()));
    }


    /*
     * Index access methods
     */

    /* Index 'FindPerson' */

    /** Index <code>FindPerson</code> cache ID */
    private static int findPersonIndexCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtIndex.Loader("FindPerson"));

    /**
     * Gets the <code>FindPerson</code> index descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return an index descriptor object
     */
    public static com.matisse.reflect.MtIndex getFindPersonIndex(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtIndex)db.getCachedObject(findPersonIndexCID);
    }

    /**
     * Finds one <code>person</code> object in index <code>FindPerson</code>.
     * @param db a database
     * @param personNo search parameter
     * @return the matching <code>person</code> object or <code>null</code> if none was found
     */
    public static person lookupFindPerson(com.matisse.MtDatabase db, int personNo) {
        return (person)getFindPersonIndex(db).lookup(new Object[] {new Integer(personNo)}, getClass(db));
    }

    /**
     * Finds <code>person</code> objects in index <code>FindPerson</code>.
     * @param db a database
     * @param personNo search parameter
     * @return the matching <code>person</code> objects or an empty array if none was found
     */
    public static person[] lookupObjectsFindPerson(com.matisse.MtDatabase db, int personNo) {
        return (person[])getFindPersonIndex(db).lookupObjects(new Object[] {new Integer(personNo)}, getClass(db), person.class);
    }

    /**
     * Opens an iterator on index <code>FindPerson</code> for class <code>person</code>.
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromPersonNo search parameter
     * @param toPersonNo search parameter
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> findPersonIterator(com.matisse.MtDatabase db, int fromPersonNo, int toPersonNo) {
        return getFindPersonIndex(db).<E>iterator(new Object[] {new Integer(fromPersonNo)}, new Object[] {new Integer(toPersonNo)}, getClass(db), com.matisse.reflect.MtIndex.DIRECT, com.matisse.MtDatabase.MAX_PREFETCHING, person.class);
    }

    /**
     * Opens an iterator on index <code>FindPerson</code> for class <code>person</code>. 
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromPersonNo search parameter
     * @param toPersonNo search parameter
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param direction MtIndex.DIRECT or MtIndex.REVERSE
     * @param numObjPerBuffer maximum number of objects to be retrieved in each request to server
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> findPersonIterator(com.matisse.MtDatabase db, int fromPersonNo, int toPersonNo, com.matisse.reflect.MtClass filterClass, int direction, int numObjPerBuffer) {
        return getFindPersonIndex(db).iterator(new Object[] {new Integer(fromPersonNo)}, new Object[] {new Integer(toPersonNo)}, filterClass, direction, numObjPerBuffer, person.class);
    }

    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public person(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[person]";
    }
}
